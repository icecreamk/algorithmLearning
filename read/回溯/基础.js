// 回溯是递归的副产品，只要有递归就会有回溯
// 因为回溯的本质是穷举，穷举所有可能，然后选出我们想要的答案

// 回溯法其实就是暴力查找，并不是什么高效的算法。但是为什么要用呢？
// 因为回溯解决的问题都不简单，一般可以解决如下几种问题
// 组合问题：N个数里面按一定规则找出k个数的集合
// 切割问题：一个字符串按一定规则有几种切割方式
// 子集问题：一个N个数的集合里有多少符合条件的子集
// 排列问题：N个数按一定规则全排列，有几种排列方式
// 棋盘问题：N皇后，解数独等等

// 组合是不强调元素顺序的，排列是强调元素顺序。
// {1, 2} 和 {2, 1} 在组合上，就是一个集合
// {1, 2} 和 {2, 1} 在排列上，就是两个集合了。

// 所有回溯法的问题都可以抽象为树形结构！
// 因为回溯法解决的都是在集合中递归查找子集，集合的大小就构成了树的宽度，递归的深度就构成了树的深度。
// for循环可以理解是横向遍历，backtracking（递归）就是纵向遍历
