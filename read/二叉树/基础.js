// 在二叉树：听说递归能做的，栈也能做！用栈来实现递归的写法，也就是所谓的迭代法
// 迭代法，可能立刻想起使用栈来模拟深度遍历，使用队列来模拟广度遍历。

// 在实现迭代法的过程中，有同学问了：递归与迭代究竟谁优谁劣呢？
// 从时间复杂度上其实迭代法和递归法差不多（在不考虑函数调用开销和函数调用产生的堆栈开销），但是空间复杂度上，递归开销会大一些，因为递归需要系统堆栈存参数返回值等等。
// 递归更容易让程序员理解，但收敛不好，容易栈溢出。
// 这么说吧，递归是方便了程序员，难为了机器（各种保存参数，各种进栈出栈）。
// 在实际项目开发的过程中我们是要尽量避免递归！因为项目代码参数、调用关系都比较复杂，不容易控制递归深度，甚至会栈溢出。

// 二叉树基本上 一种递归，三种迭代（两种模拟深度优先遍历，一种层序遍历）的写法

// 二叉树，二叉平衡树，完全二叉树，二叉搜索树
//     平衡二叉搜索树是不是二叉搜索树和平衡二叉树的结合？
// 是的，是二叉搜索树和平衡二叉树的结合。

//     平衡二叉树与完全二叉树的区别在于底层节点的位置？
// 是的，完全二叉树底层必须是从左到右连续的，且次底层是满的。

//     堆是完全二叉树和排序的结合，而不是平衡二叉搜索树？
// 堆是一棵完全二叉树，同时保证父子节点的顺序关系（有序）。 但完全二叉树一定是平衡二叉树，堆的排序是父节点大于子节点，而搜索树是父节点大于左孩子，小于右孩子，所以堆不是平衡二叉搜索树。
