// 假设你正在爬楼梯。需要 n 阶你才能到达楼顶。

// 每次你可以爬至多m (1 <= m < n)个台阶。你有多少种不同的方法可以爬到楼顶呢？

// 注意：给定 n 是一个正整数。

// 输入描述：输入共一行，包含两个正整数，分别表示n, m

// 输出描述：输出一个整数，表示爬到楼顶的方法数。

// 输入示例：3 2

// 输出示例：3

// 这其实是一个完全背包问题。
// 1阶，2阶，.... m阶就是物品，楼顶就是背包。
// 每一阶可以重复使用，例如跳了1阶，还可以继续跳1阶。
// 问跳到楼顶有几种方法其实就是问装满背包有几种方法。
// 此时大家应该发现这就是一个完全背包问题了！

var climbStairs = function (n) {
  let dp = new Array(n + 1).fill(0);
  dp[0] = 1;
  // 排列题，注意循环顺序，背包在外物品在内
  for (let j = 1; j <= n; j++) {
    //遍历背包
    for (let i = 1; i <= 2; i++) {
      //遍历物品
      if (j - i >= 0) dp[j] = dp[j] + dp[j - i];
    }
  }
  return dp[n];
};
