// total 必须，初始值
// currentValue 必须，当前值
// currentIndex 可选，当前索引
// arr 可选，当前元素所属的数组对象
// initialValue 可选，初始值，相当于total的初始值
[].reduce(function (total, currentValue, currentIndex, arr) {});

// <---------------------><--------------------- 求和  <---------------------><--------------------->

[1, 2, 3].reduce((total, num) => total + num);
[{ num: 1 }, { num: 2 }].reduce((total, item) => total + item.num, 10);

// <---------------------><--------------------- 最大值  <---------------------><--------------------->

[1, 2, 3].reduce((prev, curr) => {
  return curr > prev ? curr : prev;
});

// <---------------------><--------------------- 数组转对象  <---------------------><--------------------->

[
  { num: 1, id: 1 },
  { num: 2, id: 2 },
].reduce((info, item) => {
  info[item.id] = item;
  return info;
}, {});

// <---------------------><--------------------- 扁平化  <---------------------><--------------------->

// 该方法只能扁平化一层，不够彻底
[1, 2, [3, 4]].reduce((pre, cur) => {
  return pre.concat(cur);
}, []);

// <---------------------><--------------------- 对象数组去重  <---------------------><--------------------->
// 参考文件： 对象数组去重.js

// <---------------------><--------------------- 求字符串出现的次数  <---------------------><--------------------->

var str = "sldfjlksdjkflsjdlkfjsklfsd";
var count = str.split("").reduce((prev, curr) => {
  // 第一次 prev是 {}
  prev[curr] ? prev[curr]++ : (prev[curr] = 1);
  return prev;
}, {});

// <---------------------><--------------------- compose  <---------------------><--------------------->
// 参考文件：object的方法.js
